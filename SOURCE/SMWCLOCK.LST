Microsoft (R) Macro Assembler  Version 4.00                 10/29/86 12:02:06
SMW$CLOCK V01.02                                            Page     1-1
                                                            

                                        TITLE   SMW$CLOCK V01.02 
                                        NAME    SMW$CLOCK 
                                        PAGE    64,132 
                                ;----------------------------------------------------------------------; 
                                ;       Copyright (C) 1986 by Dallas Semiconductor Corporation         ; 
                                ;                         All Rights Reserved                          ; 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      : 
                                ;       This software is furnished under a license and may be used     ; 
                                ;       and copied only in accordance with the terms of such license   ; 
                                ;       and with the inclusion of the above copyright notice. This     ; 
                                ;       software or any other copies thereof may not be provided or    ; 
                                ;       otherwise made available to any other person.  No title to     ; 
                                ;       and ownership of the software is hereby transferred.           ; 
                                ;                                                                      ; 
                                ;       The information in this software is subject to change without  ; 
                                ;       notice and should not be construed as a commitment by Dallas   ; 
                                ;       Semiconductor Corporation.                                     ; 
                                ;                                                                      ; 
                                ;       Dallas Semiconductor assumes no responsibility for the use     ; 
                                ;       or reliability of its software on equipment which is not       ; 
                                ;       supplied by Dallas Semiconductor.                              ; 
                                ;                                                                      : 
                                ;----------------------------------------------------------------------; 
                                ;       Module:         SMW$CLOCK                                      ; 
                                ;----------------------------------------------------------------------; 
                                ;       Programmer:     Kevin Klughart                                 ; 
                                ;----------------------------------------------------------------------; 
                                ;       Date:           28-Oct-1986 @ 11:00 CDST                       ; 
                                ;----------------------------------------------------------------------; 
                                ;       System:         IBM Personal Computer/AT running PC-DOS V3.10  ; 
                                ;----------------------------------------------------------------------; 
                                ;       Language:       IBM PC 80286 (Intel iAPX 286) assembly         ; 
                                ;----------------------------------------------------------------------; 
                                ;       Assembler:      Microsoft MACRO Assembler V4.00 [ONLY]         ; 
                                ;----------------------------------------------------------------------; 
                                ;       Site:           Dallas Semiconductor                           ; 
                                ;                       4350 Beltwood Parkway South                    ; 
                                ;                       Dallas, Texas 75244                            ; 
                                ;                       (214)  450-0400                                ; 
                                ;----------------------------------------------------------------------; 
                                ;       Purpose:        This program allows the DS1216E ROM SmartWatch ; 
                                ;                       to be used with IBM PC/XT/AT 8088/8086 CPUs    ; 
                                ;                       running under the MS-DOS operating system.     ; 
                                ;                                                                      ; 
                                ;                       This utility performs two functions:           ; 
                                ;                                                                      ; 
                                ;                       (1)  Allows the DS1216E SmartWatch time to     ; 
                                ;                            be loaded from the current DOS internal   ; 
                                ;                            clock.  This is the CALIBRATE option.     ; 
                                ;                                                                      ; 
                                ;                       (2)  Allows the current DOS internal clock     ; 
                                ;                            to be loaded from any available DS1216E   ; 
                                ;                            which can be located in the system        ; 
                                ;                            address map.  This is the SET_DOS_TIME    ; 
                                ;                            option.                                   ; 
                                ;                                                                      ; 
                                ;                       (3)  Allows the DS1216 to be located in the    ; 
                                ;                            system and the clock time to be displayed.; 
                                ;                            This is the FIND option.  (DEFAULT)       ; 
Microsoft (R) Macro Assembler  Version 4.00                 10/29/86 12:02:06
SMW$CLOCK V01.02                                            Page     1-2
                                                            

                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;                       Invocation of this utility is as follows:      ; 
                                ;                                                                      ; 
                                ;                            A> SMWCLOCK [option]                      ; 
                                ;                                                                      ; 
                                ;                       Examples:                                      ; 
                                ;                                                                      ; 
                                ;                            A> SMWCLOCK calibrate    (Calibrate time) ; 
                                ;                            A> SMWCLOCK set_DOS_time (Set DOS time)   ; 
                                ;                            A> SMWCLOCK find         (Find SmartWatch); 
                                ;                            A> SMWCLOCK              (Find SmartWatch); 
                                ;----------------------------------------------------------------------; 
                                ;       Note:           This program is designed as a DOS COM image.   ; 
                                ;----------------------------------------------------------------------; 
                                ;       Revision list:  V01.00 - 24-Sep-1986, Kevin Klughart           ; 
                                ;                                Initial release.                      ; 
                                ;                                                                      ; 
                                ;                       V01.01 - 26-Sep-1986, Kevin Klughart           ; 
                                ;                                Speed up search logic by reducing     ; 
                                ;                                range of segments and cutting number  ; 
                                ;                                of test patterns for verification.    ; 
                                ;                                Display search paragraph for FIND.    ; 
                                ;                                                                      ; 
                                ;                       V01.02 - 28-Oct-1986, Kevin Klughart           ; 
                                ;                                Fix bug in setting of 24-hour mode.   ; 
                                ;                                24-hour mode is selected by clearing  ; 
                                ;                                rather than setting the mode bit.     ; 
                                ;----------------------------------------------------------------------; 
                                ;       Assemble using standard instructions and suppress expansions   ; 
                                ;----------------------------------------------------------------------; 
                                        .SALL 
                                        SUBTTL  Define local macros 
Microsoft (R) Macro Assembler  Version 4.00                 10/29/86 12:02:06
SMW$CLOCK V01.02                                            Page     1-3
Define local macros                                         

                                        PAGE 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;       Define local procedure macros                                  ; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;       SHIFT arithmetic left multiple                                 ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                SHLM    MACRO   REG,CNT 
                                 
                                        REPT    CNT                     ; For each shift 
                                        SHL     REG,1                   ; Shift one left 
                                        ENDM 
                                 
                                        ENDM 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;       SHIFT logical right multiple                                   ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                SHRM    MACRO   REG,CNT 
                                 
                                        REPT    CNT                     ; For each shift 
                                        SHR     REG,1                   ; Shift one right 
                                        ENDM 
                                 
                                        ENDM 
Microsoft (R) Macro Assembler  Version 4.00                 10/29/86 12:02:06
SMW$CLOCK V01.02                                            Page     1-4
Define local macros                                         

                                        PAGE 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;       Convert BCD to binary                                          ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                BCD_BIN MACRO   DST,SRC                 ; Convert value from BCD to binary 
                                 
                                        MOV     AH,SRC                  ; Load source data 
                                        MOV     DST,SRC                 ; Load output initially 
                                        AND     DST,0Fh                 ; Strip high order nibble 
                                        SHRM    AH,4                    ; Get high order nibble 
                                        SHL     AH,1                    ; Multiply by 2 
                                        ADD     DST,AH                  ; Add to the result 
                                        SHLM    AH,2                    ; Multiply by 4 
                                        ADD     DST,AH                  ; Generate final result sum 
                                 
                                        ENDM 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;       Convert binary to BCD byte                                     ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                BIN_BCD MACRO   DST,SRC                 ; Convert value from binary to BCD 
                                 
                                        PUSH    AX                      ; Save registers 
                                        PUSH    DX                      ; 
                                        MOV     AL,SRC                  ; Load source data 
                                        XOR     DX,DX                   ; Clear upper dividend bits 
                                        MOV     AH,DH                   ; Clear lower dividend bits 
                                        MOV     BX,10                   ; Load divisor 
                                        DIV     BX                      ; Divide AX by DX 
                                        SHLM    AX,4                    ; Move divisor to high nibble 
                                        OR      AL,DL                   ; ... and combine with lower nibble 
                                        MOV     DST,AL                  ; Store resulting BCD value 
                                        POP     DX                      ; Restore registers 
                                        POP     AX                      ; 
                                 
                                        ENDM 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;       Convert from binary to ASCII hexadecimal and print byte        ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                BIN_HEX MACRO   VALUE                   ; Convert value from binary to ASCII 
                                 
                                        IFNB    <VALUE>                 ; If value specified 
                                        MOV     DH,VALUE                ; Load display value 
                                        ENDIF 
                                 
                                        CALL    HEX                     ; Convert to ASCII hex 
                                 
                                        ENDM 
Microsoft (R) Macro Assembler  Version 4.00                 10/29/86 12:02:06
SMW$CLOCK V01.02                                            Page     1-5
Define local macros                                         

                                        PAGE 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;       PRINT byte/string to screen                                    ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                PRINT   MACRO   VALUE,STRING            ; Print value or DL contents 
                                        LOCAL   LBL                     ; Text label 
                                        LOCAL   SKIP                    ; Skip label 
                                 
                                        IFNB    <VALUE>                 ; If register or value specified 
                                        MOV     DL,VALUE                ; Load byte value 
                                        ENDIF 
                                 
                                        IFNB    <STRING>                ; If string print operation 
                                 
                                        JMP     SHORT SKIP              ; Skip the text 
                                LBL:    DB      STRING,'$'              ; Define the text 
                                 
                                SKIP:   PUSH    AX                      ; Save registers 
                                        PUSH    DX                      ; 
                                        LEA     DX,LBL                  ; Get string offset 
                                        MOV     AH,9                    ; Function:  print string 
                                        INT     21h                     ; Request DOS service 
                                        POP     DX                      ; Restore registers 
                                        POP     AX                      ; 
                                 
                                        ELSE                            ; Else if single byte 
                                 
                                        MOV     AH,2                    ; Select DOS print function 
                                        INT     21h                     ; Print the byte 
                                 
                                        ENDIF                           ; Terminate conditional 
                                 
                                        ENDM 
Microsoft (R) Macro Assembler  Version 4.00                 10/29/86 12:02:06
SMW$CLOCK V01.02                                            Page     1-6
Define local macros                                         

                                        PAGE 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;       PUSHALL registers                                              ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                PUSHALL MACRO 
                                 
                                        IRP     REG,<AX,BX,CX,DX,BP,SI,DI,DS,ES> 
                                        PUSH    REG                     ; Push all registers 
                                        ENDM                            ; 
                                        PUSHF                           ; ... and PSW flags 
                                        CLD                             ; Assume forward string search 
                                 
                                        ENDM 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;       POPALL registers                                               ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                POPALL  MACRO 
                                 
                                        POPF                            ; Restore PSW flags 
                                        IRP     REG,<ES,DS,DI,SI,BP,DX,CX,BX,AX> 
                                        POP     REG                     ; Pop all registers 
                                        ENDM                            ; 
                                 
                                        ENDM 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;       Define repeat loop count and entrypoint                        ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                REPEAT  MACRO   LBL,CNT 
                                 
                                        IFNB    <CNT>                   ; If count specified 
                                        MOV     CX,CNT                  ; Load loop counter 
                                        ENDIF                           ; Otherwise assume already loaded 
                                 
                                LBL     LABEL   NEAR                    ; ... and define loop start 
                                        PUSH    CX                      ; Save loop index counter 
                                 
                                        ENDM 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;       Define repeat loop termination exitpoint                       ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                ENDR    MACRO   LBL,X 
                                 
                                        POP     CX                      ; Restore loop counter 
                                        LOOP&X  LBL                     ; ... and continue looping 
                                 
                                        ENDM 
Microsoft (R) Macro Assembler  Version 4.00                 10/29/86 12:02:06
SMW$CLOCK V01.02                                            Page     1-7
Define local macros                                         

                                        PAGE 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;       Perform multi-way CASE branch                                  ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                CASE    MACRO   SR,BASE,LIMIT,PREFIX,DISPLIST 
                                        LOCAL   SKIP 
                                        LOCAL   VECTBL 
                                 
                                 
                                        CMP     SR,LIMIT                ; Compare to limit 
                                        JA      SKIP                    ; ... and skip if case invalid 
                                        SUB     SR,BASE                 ; Subtract base 
                                        JB      SKIP                    ; ... and skip if case invalid 
                                 
                                        SAL     SR,1                    ; Convert word to byte offset 
                                        JMP     WORD PTR CS:VECTBL[&SR&]; Vector via table 
                                 
                                VECTBL: 
                                        IRP     VECTOR,<DISPLIST>       ; Repeat for each entry 
                                        CASEVEC PREFIX,VECTOR           ; Define case vector 
                                        ENDM                            ; Terminate dispacement list 
                                SKIP:                                   ; Skip here if no cases match 
                                 
                                 
                                        ENDM 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;       Perform multi-way CASE branch                                  ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                CASEVEC MACRO   FAC,LBL 
                                 
                                        DW      OFFSET &FAC&LBL&        ; Define case vector 
                                 
                                        ENDM 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;       Define uppercase conversion macro                              ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                ;       Perform uppercase conversion on byte register                  ; 
                                ;----------------------------------------------------------------------; 
                                UPCASE  MACRO   REG 
                                        LOCAL   SKIP 
                                 
                                        AND     REG,7Fh                 ; Strip parity bit 
                                        CMP     REG,61h                 ; Too small? 
                                        JL      SKIP                    ; Yes, skip conversion 
                                        CMP     REG,7Ah                 ; Too large? 
                                        JG      SKIP                    ; Yes, skip conversion 
                                        AND     REG,5Fh                 ; Perform lower-to-upper conversion 
                                SKIP:                                   ; ... and continue processing 
                                 
                                        ENDM 
                                        SUBTTL  Define data structures 
Microsoft (R) Macro Assembler  Version 4.00                 10/29/86 12:02:06
SMW$CLOCK V01.02                                            Page     1-8
Define data structures                                      

                                        PAGE 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;       Define data structures                                         ; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;       Define code/data segment                                       ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
 0000                           $SMW    SEGMENT PARA PUBLIC '$SMW' 
                                        ASSUME  CS:$SMW,DS:$SMW,ES:$SMW,SS:$SMW 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;       Define program entrypoint                                      ; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
 0100                                   ORG     0100h 
                                ;----------------------------------------------------------------------; 
                                ;       Define procedure entry address and prepare for later exit      ; 
                                ;----------------------------------------------------------------------; 
 0100                           SMW     PROC    NEAR                    ; Define procedure entrypoint 
                                        PUSHALL                         ; Save all registers 
 010B  8B EC                            MOV     BP,SP                   ; Save stack pointer 
                                ;----------------------------------------------------------------------; 
                                ;       Start processing by finding the SmartWatch                     ; 
                                ;----------------------------------------------------------------------; 
 010D  E9 01C4 R                        JMP     SEARCH                  ; ... and begin SmartWatch search 
Microsoft (R) Macro Assembler  Version 4.00                 10/29/86 12:02:06
SMW$CLOCK V01.02                                            Page     1-9
Define data structures                                      

                                        PAGE 
                                        EVEN 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;       SmartWatch data areas                                          ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                ;       Search mode, segment, increment, and counters                  ; 
                                ;----------------------------------------------------------------------; 
 0110  0000                     SW$MODE DW      0                       ; Watch access mode (1=ROM,2=ROM0,3=ROM1) 
 0112  0000                     SW$PARA DW      0                       ; Memory segment for SmartWatch 
                                ;----------------------------------------------------------------------; 
                                ;       Define the time data structure                                 ; 
                                ;----------------------------------------------------------------------; 
                                ;       DS1216 devices have the following data fields:                 ; 
                                ;                                                                      ; 
                                ;       +-----+-----+-----+-----+-----+-----+-----+-----+              ; 
                                ;       |    10 centisecond     |      centisecond      | (00-99)      ; 
                                ;       +-----+-----+-----+-----+-----+-----+-----+-----+              ; 
                                ;       |      10 second        |        second         | (00-59)      ; 
                                ;       +-----+-----+-----+-----+-----+-----+-----+-----+              ; 
                                ;       |      10 minute        |        minute         | (00-59)      ; 
                                ;       +-----+-----+-----+-----+-----+-----+-----+-----+              ; 
                                ;       |12/24|  0  |AM/PM| hour|         hour          | (01-12/00-23); 
                                ;       +-----+-----+-----+-----+-----+-----+-----+-----+              ; 
                                ;       |  0  |  0  | osc |reset|  0  |       day       | (01-07)      ; 
                                ;       +-----+-----+-----+-----+-----+-----+-----+-----+              ; 
                                ;       |  0  |  0  |  10 date  |         date          | (01-31)      ; 
                                ;       +-----+-----+-----+-----+-----+-----+-----+-----+              ; 
                                ;       |  0  |  0  |  0  |month|         month         | (01-12)      ; 
                                ;       +-----+-----+-----+-----+-----+-----+-----+-----+              ; 
                                ;       |        10 year        |         year          | (00-99)      ; 
                                ;       +-----+-----+-----+-----+-----+-----+-----+-----+              ; 
                                ;                                                                      ; 
                                ;       OSC and RESET are active low - 0 enables these functions.      ; 
                                ;----------------------------------------------------------------------; 
                                TIME    STRUC 
 0000  00                       CC      DB      0                       ; centisecond 
 0001  00                       SC      DB      0                       ; second 
 0002  00                       MM      DB      0                       ; minute 
 0003  00                       HH      DB      0                       ; hour and mode bits 
 0004  00                       DY      DB      0                       ; day-of-week and osc/reset 
 0005  00                       DM      DB      0                       ; day-of-month 
 0006  00                       MN      DB      0                       ; month 
 0007  00                       YY      DB      0                       ; year 
 0008                           TIME    ENDS 
                                ;----------------------------------------------------------------------; 
                                ;       SmartWatch initialization sequence and time data buffer        ; 
                                ;----------------------------------------------------------------------; 
 0114  3AC5 5CA3 3AC5 5CA3      SW$INIT DW      3AC5h,5CA3h,3AC5h,5CA3h ; Initialization protocol 
 011C  00                       SW$TIME TIME    <>                      ; SmartWatch read/write time buffer 
 011D  00                       
 011E  00                       
 011F  00                       
 0120  00                       
 0121  00                       
 0122  00                       
 0123  00                       
                                
Microsoft (R) Macro Assembler  Version 4.00                 10/29/86 12:02:06
SMW$CLOCK V01.02                                            Page     1-10
Define data structures                                      

                                        PAGE 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;       Day of week and month conversion tables                        ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                ;       Define days of the week                                        ; 
                                ;----------------------------------------------------------------------; 
 0124  3F 3F 3F 20 53 75 6E     DAY     DB      '??? Sun Mon Tue Wed Thr Fri Sat ' 
       20 4D 6F 6E 20 54 75     
       65 20 57 65 64 20 54     
       68 72 20 46 72 69 20     
       53 61 74 20              
                                ;----------------------------------------------------------------------; 
                                ;       Define months of the year                                      ; 
                                ;----------------------------------------------------------------------; 
 0144  3F 3F 3F 2D 4A 61 6E     MON     DB      '???-Jan-Feb-Mar-Apr-May-Jun-Jul-' 
       2D 46 65 62 2D 4D 61     
       72 2D 41 70 72 2D 4D     
       61 79 2D 4A 75 6E 2D     
       4A 75 6C 2D              
 0164  41 75 67 2D 53 65 70             DB      'Aug-Sep-???-???-???-???-???-???-' 
       2D 3F 3F 3F 2D 3F 3F     
       3F 2D 3F 3F 3F 2D 3F     
       3F 3F 2D 3F 3F 3F 2D     
       3F 3F 3F 2D              
 0184  4F 63 74 2D 4E 6F 76             DB      'Oct-Nov-Dec-???-???-???-???-???-' 
       2D 44 65 63 2D 3F 3F     
       3F 2D 3F 3F 3F 2D 3F     
       3F 3F 2D 3F 3F 3F 2D     
       3F 3F 3F 2D              
 01A4  3F 3F 3F 2D 3F 3F 3F             DB      '???-???-???-???-???-???-???-???-' 
       2D 3F 3F 3F 2D 3F 3F     
       3F 2D 3F 3F 3F 2D 3F     
       3F 3F 2D 3F 3F 3F 2D     
       3F 3F 3F 2D              
                                        SUBTTL  SmartWatch search routine 
Microsoft (R) Macro Assembler  Version 4.00                 10/29/86 12:02:06
SMW$CLOCK V01.02                                            Page     1-11
SmartWatch search routine                                   

                                        PAGE 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;       SmartWatch search routine                                      ; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                ;       This routine searches for a SmartWatch in the address space    ; 
                                ;       of the PC by performing the following series of actions:       ; 
                                ;                                                                      ; 
                                ;               - Initialize segment search at ^xC000, increment 64kb  ; 
                                ;               - Read watch using test segment                        ; 
                                ;               - If data read is invalid, then reselect               ; 
                                ;                 segment using an updated segment value.              ; 
                                ;                                                                      ; 
                                ;       Invalid watch data is determined via the following criterion:  ; 
                                ;                                                                      ; 
                                ;               - data of all 1s is invalid                            ; 
                                ;               - data of 1s in must-be-zero (MBZ) areas is invalid    ; 
                                ;                                                                      ; 
                                ;       A second level of testing is also performed in the event that  ; 
                                ;       the returned data meets the above criterion.  This involves    ; 
                                ;       rewriting the year field with a test pattern and then reading  ; 
                                ;       back the result.  If this can be done with a variety of data   ; 
                                ;       patterns, then the SmartWatch has in fact been located.        ; 
                                ;----------------------------------------------------------------------; 
                                ;       Arguments:      SW$PARA contains the memory segment in which   ; 
                                ;                               the SmartWatch is positioned           ; 
                                ;                               (set by this routine)                  ; 
                                ;                       SW$TIME returns the current SmartWatch time    ; 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;       Initialize new increment and segment search                    ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
 01C4  BA 1000                  SEARCH: MOV     DX,01000h               ; Initialize search increment (64kb) 
 01C7  C7 06 0112 R C000        ADDRESS:MOV     SW$PARA,0C000h          ; Initialize search segment 
 01CD  C7 06 0110 R 0003        MODE:   MOV     SW$MODE,3               ; Initialize access mode 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;       Read SmartWatch using current guess at the correct segment     ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
 01D3  E8 05C7 R                CHECK:  CALL    READ                    ; Read SmartWatch data 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;       Check to see if the returned data is all ones                  ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                ;       If the returned data is all ones then the segment is invalid   ; 
                                ;----------------------------------------------------------------------; 
 01D6  B9 0004                          MOV     CX,4                    ; Set string length 
 01D9  8D 3E 011C R                     LEA     DI,SW$TIME              ; Set string address 
 01DD  B8 FFFF                          MOV     AX,0FFFFh               ; Set skip pattern 
                                 
 01E0  F3/ AF                           REPE    SCASW                   ; Skip any repeated data 
 01E2  74 3F                            JE      NEXT                    ; Invalid data - check next segment 
Microsoft (R) Macro Assembler  Version 4.00                 10/29/86 12:02:06
SMW$CLOCK V01.02                                            Page     1-12
SmartWatch search routine                                   

                                        PAGE 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;       Check to see if the returned data has invalid bits             ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                ;       If data contains invalid bits then the segment is incorrect.   ; 
                                ;       If data bits which are MBZ are in fact read as 1s, then we     ; 
                                ;       obviously have not found the correct SmartWatch segment.       ; 
                                ;----------------------------------------------------------------------; 
 01E4  8D 36 011C R                     LEA     SI,SW$TIME              ; Get string address 
                                 
                                        IRP     FIELD,<08000h,04080h,0C0C8h,000E0h> 
                                        LODSW                           ; Get SmartWatch data word 
                                        TEST    AX,FIELD                ; ... and check for invalid bits 
                                        JNZ     NEXT                    ; Invalid if MBZ bits are set 
                                        ENDM                            ; Terminate field check expansion 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;       Verify SmartWatch location by writing year with data patterns  ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
 0200  8A 26 0123 R                     MOV     AH,SW$TIME.YY           ; Save the current year 
 0204  B0 80                            MOV     AL,80h                  ; Rolling bit test (8 patterns) 
                                 
 0206  A2 0123 R                VERIFY: MOV     SW$TIME.YY,AL           ; Load test data pattern 
 0209  E8 0659 R                        CALL    WRITE                   ; Rewrite the SmartWatch data 
 020C  E8 05C7 R                        CALL    READ                    ; Reread the SmartWatch data 
 020F  38 06 0123 R                     CMP     SW$TIME.YY,AL           ; Valid year returned? 
 0213  75 0E                            JNE     NEXT                    ; No, check next address segment 
 0215  D0 E8                            SHR     AL,1                    ; Generate next data pattern 
 0217  75 ED                            JNZ     VERIFY                  ; ... and continue verification 
                                 
 0219  88 26 0123 R                     MOV     SW$TIME.YY,AH           ; Restore the original year 
 021D  E8 0659 R                        CALL    WRITE                   ; ... and rewrite SmartWatch data 
 0220  EB 44 90                         JMP     COMMAND                 ; Process user command 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;       Search has failed - retry using a new segment guess            ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
 0223  FF 0E 0110 R             NEXT:   DEC     SW$MODE                 ; Decrement the search mode type 
 0227  75 AA                            JNE     CHECK                   ; ... and retry using this mode 
                                 
 0229  01 16 0112 R                     ADD     SW$PARA,DX              ; Add increment to test segment 
 022D  73 9E                            JNC     MODE                    ; ... and retest for SmartWatch 
                                 
 022F  D1 EA                            SHR     DX,1                    ; Divide the search increment by 2 
 0231  81 E2 FF80                       AND     DX,0FF80h               ; Mask to get 2048-byte boundaries 
 0235  75 90                            JNZ     ADDRESS                 ; ... and continue if not zero 
                                ;----------------------------------------------------------------------; 
                                ;       Watch not found!  Display error message and exit.              ; 
                                ;----------------------------------------------------------------------; 
                                        PRINT   ,<'ERROR:  SmartWatch not found!'> 
 0263  E9 05BA R                        JMP     EXIT                    ; Terminate program 
                                        SUBTTL  Process user command 
Microsoft (R) Macro Assembler  Version 4.00                 10/29/86 12:02:06
SMW$CLOCK V01.02                                            Page     1-13
Process user command                                        

                                        PAGE 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;       Process user command                                           ; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                ;       This code fragment scans the command line for a user command   ; 
                                ;       which may be one of Calibrate, Set_DOS_time, Find (default).   ; 
                                ;       Note that only the first character of the command is used      ; 
                                ;       to determine the command displatch.  Remaining bytes are       ; 
                                ;       ignored.                                                       ; 
                                ;----------------------------------------------------------------------; 
                                ;       Read command line bytes and ignore spaces                      ; 
                                ;----------------------------------------------------------------------; 
 0266  BE 0081                  COMMAND:MOV     SI,81h                  ; Point to start of command line 
 0269  33 DB                            XOR     BX,BX                   ; Initialize command vector 
                                 
 026B  AC                       CMD:    LODSB                           ; Get a command line byte 
                                        UPCASE  AL                      ; ... and convert to upper case 
 0278  3C 20                            CMP     AL,' '                  ; Space character? 
 027A  72 12                            JB      VECTOR                  ; Terminate if control sequence 
                                ;----------------------------------------------------------------------; 
                                ;       Check for valid user commands (C/F/S)                          ; 
                                ;----------------------------------------------------------------------; 
 027C  B3 00                            MOV     BL,0                    ; Load vector index 
 027E  3C 46                            CMP     AL,'F'                  ; Find? 
 0280  74 0C                            JE      VECTOR                  ; Yes, dispatch command 
                                 
 0282  B3 01                            MOV     BL,1                    ; Load vector index 
 0284  3C 43                            CMP     AL,'C'                  ; Calibrate? 
 0286  74 06                            JE      VECTOR                  ; Yes, dispatch command 
                                 
 0288  B3 02                            MOV     BL,2                    ; Load vector index 
 028A  3C 53                            CMP     AL,'S'                  ; Set DOS time? 
 028C  75 DD                            JNE     CMD                     ; No, check next byte 
                                ;----------------------------------------------------------------------; 
                                ;       Vector to action routine                                       ; 
                                ;----------------------------------------------------------------------; 
 028E                           VECTOR: CASE    BX,0,2,<>,<FIND,CAL,SET> 
 02A5  E9 0503 R                        JMP     DISPLAY                 ; Display if invalid command 
                                        SUBTTL  Function:  find SmartWatch 
Microsoft (R) Macro Assembler  Version 4.00                 10/29/86 12:02:06
SMW$CLOCK V01.02                                            Page     1-14
Function:  find SmartWatch                                  

                                        PAGE 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;       Function:  find SmartWatch                                     ; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                ;       This routine displays the address in which the SmartWatch      ; 
                                ;       was found, and also indicates the type of SmartWatch access.   ; 
                                ;----------------------------------------------------------------------; 
                                ;       Display the SmartWatch segment address                         ; 
                                ;----------------------------------------------------------------------; 
 02A8                           FIND:   PRINT   ,<'SmartWatch V01.02 found at address '> 
                                 
 02DA  A1 0112 R                        MOV     AX,SW$PARA              ; Get address segment 
                                        BIN_HEX AH                      ; Display high nibble 
                                        BIN_HEX AL                      ; Display low  nibble 
                                        PRINT   ,<'0:  '>               ; Indicate paragraph address 
                                ;----------------------------------------------------------------------; 
                                ;       Display current time and return to caller                      ; 
                                ;----------------------------------------------------------------------; 
 02FA  E9 0503 R                        JMP     DISPLAY                 ; Display current time 
                                        SUBTTL  Function:  calibrate time 
Microsoft (R) Macro Assembler  Version 4.00                 10/29/86 12:02:06
SMW$CLOCK V01.02                                            Page     1-15
Function:  calibrate time                                   

                                        PAGE 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;       Function:  calibrate time                                      ; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                ;       This routine calibrates the time in the SmartWatch by          ; 
                                ;       reading the current time from DOS and setting the SmartWatch   ; 
                                ;       accordingly, after making any necessary format conversions.    ; 
                                ;----------------------------------------------------------------------; 
                                ;       Get the current date from DOS                                  ; 
                                ;----------------------------------------------------------------------; 
 02FD  B4 2A                    CAL:    MOV     AH,2Ah                  ; Function: get date 
 02FF  CD 21                            INT     21h                     ; Request DOS service 
                                ;----------------------------------------------------------------------; 
                                ;       Load current DOS date                                          ; 
                                ;----------------------------------------------------------------------; 
 0301  FE C0                            INC     AL                      ; Correct offset for day-of-week 
                                        BIN_BCD SW$TIME.DY,AL           ; Convert day-of-week 
 031F  80 0E 0120 R 10                  OR      SW$TIME.DY,10h          ; Set reset bit (disable) 
                                 
                                        BIN_BCD SW$TIME.DM,DL           ; Convert day-of-month 
                                        BIN_BCD SW$TIME.MN,DH           ; Convert month 
                                 
 035C  81 E9 076C                       SUB     CX,1900                 ; Subtract year offset 
                                        BIN_BCD SW$TIME.YY,CL           ; Convert year 
                                ;----------------------------------------------------------------------; 
                                ;       Get the current time from DOS                                  ; 
                                ;----------------------------------------------------------------------; 
 037C  B4 2C                            MOV     AH,2Ch                  ; Function: get time 
 037E  CD 21                            INT     21h                     ; Request DOS service 
                                ;----------------------------------------------------------------------; 
                                ;       Load current DOS time                                          ; 
                                ;----------------------------------------------------------------------; 
                                        BIN_BCD SW$TIME.HH,CH           ; Convert hours 
 039C  80 26 011F R 7F                  AND     SW$TIME.HH,7Fh          ; Set 24 hour mode 
                                 
                                        BIN_BCD SW$TIME.MM,CL           ; Convert minutes 
                                        BIN_BCD SW$TIME.SC,DH           ; Convert seconds 
                                        BIN_BCD SW$TIME.CC,DL           ; Convert centiseconds 
                                ;----------------------------------------------------------------------; 
                                ;       Rewrite the corrected SmartWatch data                          ; 
                                ;----------------------------------------------------------------------; 
 03F5  E8 0659 R                        CALL    WRITE                   ; Rewrite the SmartWatch data 
                                ;----------------------------------------------------------------------; 
                                ;       Display current time and return to caller                      ; 
                                ;----------------------------------------------------------------------; 
 03F8  E9 0503 R                        JMP     DISPLAY                 ; Display current time 
                                        SUBTTL  Function:  set DOS time 
Microsoft (R) Macro Assembler  Version 4.00                 10/29/86 12:02:06
SMW$CLOCK V01.02                                            Page     1-16
Function:  set DOS time                                     

                                        PAGE 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;       Function:  set DOS time                                        ; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                ;       This routine sets the current DOS time base on the SmartWatch  ; 
                                ;       time, performing any BCD/BINARY format conversions required.   ; 
                                ;----------------------------------------------------------------------; 
                                ;       Load current DOS date                                          ; 
                                ;----------------------------------------------------------------------; 
 03FB  80 26 0120 R 07          SET:    AND     SW$TIME.DY,7            ; Strip control bits in day field 
 0400  FE 0E 0120 R                     DEC     SW$TIME.DY              ; Correct offset for day-of-week 
                                        BCD_BIN AL,SW$TIME.DY           ; Convert day-of-week 
                                 
                                        BCD_BIN DL,SW$TIME.DM           ; Convert day-of-month 
                                        BCD_BIN DH,SW$TIME.MN           ; Convert month 
                                 
 0459  33 C9                            XOR     CX,CX                   ; Clear resulting year 
                                        BCD_BIN CL,SW$TIME.YY           ; Convert year 
 0478  81 C1 076C                       ADD     CX,1900                 ; Add year offset 
                                ;----------------------------------------------------------------------; 
                                ;       Set the current DOS date                                       ; 
                                ;----------------------------------------------------------------------; 
 047C  B4 2B                            MOV     AH,2Bh                  ; Function: set date 
 047E  CD 21                            INT     21h                     ; Request DOS service 
                                ;----------------------------------------------------------------------; 
                                ;       Load current DOS time                                          ; 
                                ;----------------------------------------------------------------------; 
 0480  80 26 011F R 7F                  AND     SW$TIME.HH,7Fh          ; Strip mode bit 
                                        BCD_BIN CH,SW$TIME.HH           ; Convert hours 
                                 
                                        BCD_BIN CL,SW$TIME.MM           ; Convert minutes 
                                        BCD_BIN DH,SW$TIME.SC           ; Convert seconds 
                                        BCD_BIN DL,SW$TIME.CC           ; Convert centiseconds 
                                ;----------------------------------------------------------------------; 
                                ;       Set the current DOS time                                       ; 
                                ;----------------------------------------------------------------------; 
 04F9  B4 2D                            MOV     AH,2Dh                  ; Function: set time 
 04FB  CD 21                            INT     21h                     ; Request DOS service 
                                ;----------------------------------------------------------------------; 
                                ;       Reread the SmartWatch time for display purposes                ; 
                                ;----------------------------------------------------------------------; 
 04FD  E8 05C7 R                        CALL    READ                    ; Read current SmartWatch time 
                                ;----------------------------------------------------------------------; 
                                ;       Display current time and return to caller                      ; 
                                ;----------------------------------------------------------------------; 
 0500  EB 01 90                         JMP     DISPLAY                 ; Display current time 
                                        SUBTTL  Display the SmartWatch time 
Microsoft (R) Macro Assembler  Version 4.00                 10/29/86 12:02:06
SMW$CLOCK V01.02                                            Page     1-17
Display the SmartWatch time                                 

                                        PAGE 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;       Display the SmartWatch time                                    ; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                ;       This routine converts and displays the SmartWatch data & time. ; 
                                ;----------------------------------------------------------------------; 
                                ;       Display the day-of-week                                        ; 
                                ;----------------------------------------------------------------------; 
 0503  A0 0120 R                DISPLAY:MOV     AL,SW$TIME.DY           ; Get day-of-week 
 0506  25 0007                          AND     AX,7                    ; Limit range of weekday 
                                        SHLM    AX,2                    ; Calculate offset (*4) 
 050D  8D 36 0124 R                     LEA     SI,DAY                  ; Get days of week table address 
 0511  03 F0                            ADD     SI,AX                   ; Point to day-of-week 
                                 
                                        REPT    4                       ; Display 4 bytes 
                                        LODSB                           ; Get day-of-week text byte 
                                        PRINT   AL                      ; ... and display it 
                                        ENDM                            ; Terminate day of week display 
                                ;----------------------------------------------------------------------; 
                                ;       Display the day-of-month                                       ; 
                                ;----------------------------------------------------------------------; 
                                        BIN_HEX SW$TIME.DM              ; Display day-of-month 
                                        PRINT   <'-'>                   ; 
                                ;----------------------------------------------------------------------; 
                                ;       Display the month                                              ; 
                                ;----------------------------------------------------------------------; 
 053C  A0 0122 R                        MOV     AL,SW$TIME.MN           ; Get month 
 053F  25 001F                          AND     AX,1Fh                  ; Limit scope of result 
                                        SHLM    AX,2                    ; Calculate offset 
 0546  8D 36 0144 R                     LEA     SI,MON                  ; Get months of year table address 
 054A  03 F0                            ADD     SI,AX                   ; Point to month-of-year 
                                 
                                        REPT    4                       ; Display 4 bytes 
                                        LODSB                           ; Get month text byte 
                                        PRINT   AL                      ; ... and display it 
                                        ENDM                            ; Terminate month display 
                                ;----------------------------------------------------------------------; 
                                ;       Display the year                                               ; 
                                ;----------------------------------------------------------------------; 
                                        PRINT   <'1'>                   ; 
                                        PRINT   <'9'>                   ; 
                                        BIN_HEX SW$TIME.YY              ; Display year 
                                        PRINT   <','>                   ; 
                                        PRINT   <' '>                   ; 
                                ;----------------------------------------------------------------------; 
                                ;       Display the time                                               ; 
                                ;----------------------------------------------------------------------; 
 0587  80 26 011F R 7F                  AND     SW$TIME.HH,7Fh          ; Strip mode bit 
                                        BIN_HEX SW$TIME.HH              ; Display hour 
                                        PRINT   <':'>                   ; 
                                        BIN_HEX SW$TIME.MM              ; Display minute 
                                        PRINT   <':'>                   ; 
                                        BIN_HEX SW$TIME.SC              ; Display second 
                                        PRINT   <'.'>                   ; 
                                        BIN_HEX SW$TIME.CC              ; Display centisecond 
Microsoft (R) Macro Assembler  Version 4.00                 10/29/86 12:02:06
SMW$CLOCK V01.02                                            Page     1-18
Display the SmartWatch time                                 

                                        PAGE 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;       Terminate update and return to DOS                             ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
 05BA  8B E5                    EXIT:   MOV     SP,BP                   ; Restore stack pointer 
                                        POPALL                          ; Restore all registers 
 05C6  C3                               RET                             ; Return to DOS 
                                SMW     ENDP 
                                        SUBTTL  SmartWatch read routine 
Microsoft (R) Macro Assembler  Version 4.00                 10/29/86 12:02:06
SMW$CLOCK V01.02                                            Page     1-19
SmartWatch read routine                                     

                                        PAGE 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;       SmartWatch read routine                                        ; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                ;       This routine resets the SmartWatch, transfers the required     ; 
                                ;       protocol, and then reads the current time using the transfer   ; 
                                ;       protocol of the SmartWatch.  Result is placed in SW$TIME.      ; 
                                ;----------------------------------------------------------------------; 
                                ;       Arguments:      SW$PARA contains the memory segment in which   ; 
                                ;                               the SmartWatch is positioned           ; 
                                ;                       SW$INIT contains 8 bytes of initialization     ; 
                                ;                       SW$TIME returns the current SmartWatch time    ; 
                                ;----------------------------------------------------------------------; 
 05C7                           READ    PROC    NEAR                    ; Read SmartWatch time 
                                        PUSHALL                         ; Save all registers 
 05D2  FA                               CLI                             ; Inhibit system interrupts 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;       Reset the SmartWatch                                           ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
 05D3  E8 0715 R                        CALL    RESET                   ; Reset the SmartWatch 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;       Transfer the SmartWatch protocol                               ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
 05D6  8D 36 0114 R                     LEA     SI,SW$INIT              ; Load initialization protocol address 
 05DA  E8 0681 R                        CALL    WRT                     ; ... and write it to the Watch 
                                ;----------------------------------------------------------------------; 
                                ;       Load the address of the return time data buffer                ; 
                                ;----------------------------------------------------------------------; 
 05DD  8D 3E 011C R                     LEA     DI,SW$TIME              ; Load return time address 
                                ;----------------------------------------------------------------------; 
                                ;       Initialize data segment to that of the SmartWatch              ; 
                                ;----------------------------------------------------------------------; 
 05E1  2E: 8E 1E 0112 R                 MOV     DS,CS:SW$PARA           ; Load the SmartWatch data segment 
                                ;----------------------------------------------------------------------; 
                                ;       Determine access mode which will be used with SmartWatch       ; 
                                ;----------------------------------------------------------------------; 
 05E6  2E: 8B 1E 0110 R                 MOV     BX,CS:SW$MODE           ; Get SmartWatch access mode 
                                ;----------------------------------------------------------------------; 
                                ;       Vector to action routine based on SmartWatch access mode       ; 
                                ;----------------------------------------------------------------------; 
                                        CASE    BX,1,3,<RD_>,<ROM,ROM0,ROM1> 
                                        SUBTTL  Read - ROM access mode 
Microsoft (R) Macro Assembler  Version 4.00                 10/29/86 12:02:06
SMW$CLOCK V01.02                                            Page     1-20
Read - ROM access mode                                      

                                        PAGE 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;       Read protocol - ROM non-interleaved access mode                ; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;       Read the current time from the SmartWatch                      ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
 0602                           RD_ROM: REPEAT  RD_ROM_WORD,4           ; Repeat for 8 bytes (4 words) 
                                 
                                        REPEAT  RD_ROM_BITS,16          ; Repeat for 16 bits in each word 
 060A  A0 0004                          MOV     AL,DS:[0100b]           ; Read data byte (bit) from SmartWatch 
 060D  D0 D8                            RCR     AL,1                    ; Rotate LSB to carry bit 
 060F  D1 DB                            RCR     BX,1                    ; Rotate LSB to MSB of result register 
                                        ENDR    RD_ROM_BITS             ; Terminate bit fill repetition 
                                 
 0614  8B C3                            MOV     AX,BX                   ; Get result data word 
 0616  AB                               STOSW                           ; Store the complete 16 bit result 
                                        ENDR    RD_ROM_WORD             ; Terminate word fill repetition 
                                ;----------------------------------------------------------------------; 
                                ;       Terminate transfer operation                                   ; 
                                ;----------------------------------------------------------------------; 
 061A  EB 32                            JMP     SHORT RD_EXT            ; Return to caller 
                                        SUBTTL  Read - Interleaved ROM 
Microsoft (R) Macro Assembler  Version 4.00                 10/29/86 12:02:06
SMW$CLOCK V01.02                                            Page     1-21
Read - Interleaved ROM                                      

                                        PAGE 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;       Read protocol - ROM interleaved access mode bank 0             ; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;       Read the current time from the SmartWatch                      ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
 061C                           RD_ROM0:REPEAT  RD_ROM0_WORD,4          ; Repeat for 8 bytes (4 words) 
                                 
                                        REPEAT  RD_ROM0_BITS,16         ; Repeat for 16 bits in each word 
 0624  A0 0008                          MOV     AL,DS:[1000b]           ; Read data byte (bit) from SmartWatch 
 0627  D0 D8                            RCR     AL,1                    ; Rotate LSB to carry bit 
 0629  D1 DB                            RCR     BX,1                    ; Rotate LSB to MSB of result register 
                                        ENDR    RD_ROM0_BITS            ; Terminate bit fill repetition 
                                 
 062E  8B C3                            MOV     AX,BX                   ; Get result data word 
 0630  AB                               STOSW                           ; Store the complete 16 bit result 
                                        ENDR    RD_ROM0_WORD            ; Terminate word fill repetition 
                                ;----------------------------------------------------------------------; 
                                ;       Terminate transfer operation                                   ; 
                                ;----------------------------------------------------------------------; 
 0634  EB 18                            JMP     SHORT RD_EXT            ; Return to caller 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;       Read protocol - ROM interleaved access mode bank 1             ; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;       Read the current time from the SmartWatch                      ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
 0636                           RD_ROM1:REPEAT  RD_ROM1_WORD,4          ; Repeat for 8 bytes (4 words) 
                                 
                                        REPEAT  RD_ROM1_BITS,16         ; Repeat for 16 bits in each word 
 063E  A0 0009                          MOV     AL,DS:[1001b]           ; Read data byte (bit) from SmartWatch 
 0641  D0 D8                            RCR     AL,1                    ; Rotate LSB to carry bit 
 0643  D1 DB                            RCR     BX,1                    ; Rotate LSB to MSB of result register 
                                        ENDR    RD_ROM1_BITS            ; Terminate bit fill repetition 
                                 
 0648  8B C3                            MOV     AX,BX                   ; Get result data word 
 064A  AB                               STOSW                           ; Store the complete 16 bit result 
                                        ENDR    RD_ROM1_WORD            ; Terminate word fill repetition 
                                ;----------------------------------------------------------------------; 
                                ;       Return from SmartWatch service                                 ; 
                                ;----------------------------------------------------------------------; 
 064E                           RD_EXT: POPALL                          ; Restore all registers 
 0658  C3                               RET                             ; Return to caller 
                                READ    ENDP 
                                        SUBTTL  SmartWatch write routine 
Microsoft (R) Macro Assembler  Version 4.00                 10/29/86 12:02:06
SMW$CLOCK V01.02                                            Page     1-22
SmartWatch write routine                                    

                                        PAGE 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;       SmartWatch write routine                                       ; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                ;       This routine resets the SmartWatch, transfers the required     ; 
                                ;       protocol, and then writes the current time using the transfer  ; 
                                ;       protocol of the SmartWatch.  Data is taken from SW$TIME.       ; 
                                ;----------------------------------------------------------------------; 
                                ;       Arguments:      SW$PARA contains the memory segment in which   ; 
                                ;                               the SmartWatch is positioned           ; 
                                ;                       SW$INIT contains 8 bytes of initialization     ; 
                                ;                       SW$TIME contains the time data to be written   ; 
                                ;----------------------------------------------------------------------; 
 0659                           WRITE   PROC    NEAR                    ; Write SmartWatch time 
                                        PUSHALL                         ; Save all registers 
 0664  FA                               CLI                             ; Inhibit system interrupts 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;       Reset the SmartWatch                                           ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
 0665  E8 0715 R                        CALL    RESET                   ; Reset the SmartWatch 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;       Transfer the SmartWatch protocol                               ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
 0668  8D 36 0114 R                     LEA     SI,SW$INIT              ; Load initialization protocol address 
 066C  E8 0681 R                        CALL    WRT                     ; ... and write it to the Watch 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;       Transfer the SmartWatch data                                   ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
 066F  8D 36 011C R                     LEA     SI,SW$TIME              ; Load time data buffer address 
 0673  E8 0681 R                        CALL    WRT                     ; ... and write it to the Watch 
                                ;----------------------------------------------------------------------; 
                                ;       Return from SmartWatch service                                 ; 
                                ;----------------------------------------------------------------------; 
                                        POPALL                          ; Restore all registers 
 0680  C3                               RET                             ; Return to caller 
                                WRITE   ENDP 
                                        SUBTTL  Write data bytes routine 
Microsoft (R) Macro Assembler  Version 4.00                 10/29/86 12:02:06
SMW$CLOCK V01.02                                            Page     1-23
Write data bytes routine                                    

                                        PAGE 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;       Write data bytes routine                                       ; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                ;       This routine transfers 8 bytes of data pointed to by [SI] to   ; 
                                ;       the SmartWatch via the write data function.                    ; 
                                ;----------------------------------------------------------------------; 
                                ;       Arguments:      ES:[DI] points to the data to be written.      ; 
                                ;----------------------------------------------------------------------; 
 0681                           WRT     PROC    NEAR                    ; Write data bytes 
                                        PUSHALL                         ; Save all registers 
                                ;----------------------------------------------------------------------; 
                                ;       Initialize data segment to that of the SmartWatch              ; 
                                ;----------------------------------------------------------------------; 
 068C  2E: 8E 1E 0112 R                 MOV     DS,CS:SW$PARA           ; Load the SmartWatch data segment 
                                ;----------------------------------------------------------------------; 
                                ;       Determine access mode which will be used with SmartWatch       ; 
                                ;----------------------------------------------------------------------; 
 0691  2E: 8B 1E 0110 R                 MOV     BX,CS:SW$MODE           ; Get SmartWatch access mode 
                                ;----------------------------------------------------------------------; 
                                ;       Vector to action routine based on SmartWatch access mode       ; 
                                ;----------------------------------------------------------------------; 
                                        CASE    BX,1,3,<WT_>,<ROM,ROM0,ROM1> 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;       Write protocol - ROM non-interleaved access mode               ; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
 06AD  BB 0002                  WT_ROM: MOV     BX,0010b                ; Get ROM write function 
                                 
                                 
                                        REPEAT  WT_ROM_WORD,4           ; Repeat for 8 bytes (4 words) 
 06B4  26: AD                           LODS    WORD PTR ES:[SI]        ; Load the complete 16 bit source 
                                 
                                        REPEAT  WT_ROM_BITS,16          ; Repeat for 16 bits in each word 
 06BA  D1 EB                            SHR     BX,1                    ; Trash data bit of BX 
 06BC  D1 D8                            RCR     AX,1                    ; Get next data bit 
 06BE  D1 D3                            RCL     BX,1                    ; Load new data bit 
 06C0  8A 17                            MOV     DL,[BX]                 ; Write bit to SmartWatch 
                                        ENDR    WT_ROM_BITS             ; Terminate bit fill repetition 
                                 
                                        ENDR    WT_ROM_WORD             ; Terminate word fill repetition 
                                ;----------------------------------------------------------------------; 
                                ;       Terminate transfer operation                                   ; 
                                ;----------------------------------------------------------------------; 
 06C8  EB 40                            JMP     SHORT WT_EXT            ; Return to caller 
                                        SUBTTL  Write - Interleaved ROM 
Microsoft (R) Macro Assembler  Version 4.00                 10/29/86 12:02:06
SMW$CLOCK V01.02                                            Page     1-24
Write - Interleaved ROM                                     

                                        PAGE 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;       Write protocol - ROM interleaved access mode bank 0            ; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
 06CA  BB 0004                  WT_ROM0:MOV     BX,0100b                ; Get ROM write function 
                                 
                                 
                                        REPEAT  WT_ROM0_WORD,4          ; Repeat for 8 bytes (4 words) 
 06D1  26: AD                           LODS    WORD PTR ES:[SI]        ; Load the complete 16 bit source 
                                 
                                        REPEAT  WT_ROM0_BITS,16         ; Repeat for 16 bits in each word 
 06D7  D1 CB                            ROR     BX,1                    ; Save bank bit by shifting right 
 06D9  D1 EB                            SHR     BX,1                    ; Trash data bit of BX 
 06DB  D1 D8                            RCR     AX,1                    ; Get next data bit 
 06DD  D1 D3                            RCL     BX,1                    ; Load new data bit 
 06DF  D1 C3                            ROL     BX,1                    ; Restore bank bit by shifting left 
 06E1  8A 17                            MOV     DL,[BX]                 ; Write bit to SmartWatch 
                                        ENDR    WT_ROM0_BITS            ; Terminate bit fill repetition 
                                 
                                        ENDR    WT_ROM0_WORD            ; Terminate word fill repetition 
                                ;----------------------------------------------------------------------; 
                                ;       Terminate transfer operation                                   ; 
                                ;----------------------------------------------------------------------; 
 06E9  EB 1F                            JMP     SHORT WT_EXT            ; Return to caller 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;       Write protocol - ROM interleaved access mode bank 1            ; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
 06EB  BB 0005                  WT_ROM1:MOV     BX,0101b                ; Get ROM write function 
                                 
                                 
                                        REPEAT  WT_ROM1_WORD,4          ; Repeat for 8 bytes (4 words) 
 06F2  26: AD                           LODS    WORD PTR ES:[SI]        ; Load the complete 16 bit source 
                                 
                                        REPEAT  WT_ROM1_BITS,16         ; Repeat for 16 bits in each word 
 06F8  D1 CB                            ROR     BX,1                    ; Save bank bit by shifting right 
 06FA  D1 EB                            SHR     BX,1                    ; Trash data bit of BX 
 06FC  D1 D8                            RCR     AX,1                    ; Get next data bit 
 06FE  D1 D3                            RCL     BX,1                    ; Load new data bit 
 0700  D1 C3                            ROL     BX,1                    ; Restore bank bit by shifting left 
 0702  8A 17                            MOV     DL,[BX]                 ; Write bit to SmartWatch 
                                        ENDR    WT_ROM1_BITS            ; Terminate bit fill repetition 
                                 
                                        ENDR    WT_ROM1_WORD            ; Terminate word fill repetition 
                                ;----------------------------------------------------------------------; 
                                ;       Return from SmartWatch service                                 ; 
                                ;----------------------------------------------------------------------; 
 070A                           WT_EXT: POPALL                          ; Restore all registers 
 0714  C3                               RET                             ; Return to caller 
                                WRT     ENDP 
                                        SUBTTL  Reset SmartWatch routine 
Microsoft (R) Macro Assembler  Version 4.00                 10/29/86 12:02:06
SMW$CLOCK V01.02                                            Page     1-25
Reset SmartWatch routine                                    

                                        PAGE 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;       Reset SmartWatch routine                                       ; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                ;       This routine resets the SmartWatch by clocking through 65      ; 
                                ;       single-bit reads to flush any pending transfers.               ; 
                                ;----------------------------------------------------------------------; 
                                ;       Arguments:      SW$MODE indicates transfer mode type           ; 
                                ;                       SW$PARA contains the SmartWatch paragraph      ; 
                                ;----------------------------------------------------------------------; 
 0715                           RESET   PROC    NEAR                    ; Reset SmartWatch 
                                        PUSHALL                         ; Save all registers 
                                ;----------------------------------------------------------------------; 
                                ;       Load loop counter for reset operation                          ; 
                                ;----------------------------------------------------------------------; 
 0720  B9 0041                          MOV     CX,65                   ; Load reset loop counter 
                                ;----------------------------------------------------------------------; 
                                ;       Initialize data segment to that of the SmartWatch              ; 
                                ;----------------------------------------------------------------------; 
 0723  2E: 8E 1E 0112 R                 MOV     DS,CS:SW$PARA           ; Load the SmartWatch data segment 
                                ;----------------------------------------------------------------------; 
                                ;       Determine access mode which will be used with SmartWatch       ; 
                                ;----------------------------------------------------------------------; 
 0728  2E: 8B 1E 0110 R                 MOV     BX,CS:SW$MODE           ; Get SmartWatch access mode 
                                ;----------------------------------------------------------------------; 
                                ;       Vector to action routine based on SmartWatch access mode       ; 
                                ;----------------------------------------------------------------------; 
                                        CASE    BX,1,3,<RS_>,<ROM,ROM0,ROM1> 
Microsoft (R) Macro Assembler  Version 4.00                 10/29/86 12:02:06
SMW$CLOCK V01.02                                            Page     1-26
Reset SmartWatch routine                                    

                                        PAGE 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;       Reset protocol - ROM non-interleaved access mode               ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                ;       Reset the SmartWatch by performing 65 consecutive reads.       ; 
                                ;----------------------------------------------------------------------; 
 0744  A0 0004                  RS_ROM: MOV     AL,DS:[0100b]           ; Issue reset sequence 
 0747  E2 FB                            LOOP    RS_ROM                  ; Terminate repeat sequence 
                                 
 0749  EB 0C                            JMP     SHORT RS_EXT            ; Return to caller 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;       Reset protocol - ROM interleaved access mode bank 0            ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                ;       Reset the SmartWatch by performing 65 consecutive reads.       ; 
                                ;----------------------------------------------------------------------; 
 074B  A0 0008                  RS_ROM0:MOV     AL,DS:[1000b]           ; Issue reset sequence 
 074E  E2 FB                            LOOP    RS_ROM0                 ; Terminate repeat sequence 
                                 
 0750  EB 05                            JMP     SHORT RS_EXT            ; Return to caller 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;       Reset protocol - ROM interleaved access mode bank 1            ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                ;       Reset the SmartWatch by performing 65 consecutive reads.       ; 
                                ;----------------------------------------------------------------------; 
 0752  A0 0009                  RS_ROM1:MOV     AL,DS:[1001b]           ; Issue reset sequence 
 0755  E2 FB                            LOOP    RS_ROM1                 ; Terminate repeat sequence 
                                ;----------------------------------------------------------------------; 
                                ;       Return from SmartWatch service                                 ; 
                                ;----------------------------------------------------------------------; 
 0757                           RS_EXT: POPALL                          ; Restore all registers 
 0761  C3                               RET                             ; Return to caller 
                                RESET   ENDP 
                                        SUBTTL  Binary to hexadecimal conversion 
Microsoft (R) Macro Assembler  Version 4.00                 10/29/86 12:02:06
SMW$CLOCK V01.02                                            Page     1-27
Binary to hexadecimal conversion                            

                                        PAGE 
                                ;----------------------------------------------------------------------; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;       Binary to hexadecimal conversion                               ; 
                                ;                                                                      ; 
                                ;                                                                      ; 
                                ;----------------------------------------------------------------------; 
                                ;       This routine converts the binary number in DH to ASCII hex     ; 
                                ;       and displays the result to the screen using DOS functions.     ; 
                                ;----------------------------------------------------------------------; 
                                ;       Arguments:      DH is the byte to be converted and printed     ; 
                                ;----------------------------------------------------------------------; 
 0762                           HEX     PROC    NEAR                    ; Convert to ASCII hex 
                                        PUSHALL                         ; Save all registers 
                                ;----------------------------------------------------------------------; 
                                ;       Convert and display four nibbles, starting with high nibble    ; 
                                ;----------------------------------------------------------------------; 
                                        REPEAT  HEX_LOOP,2              ; Repeat 2 times 
 0771  D0 C6                            ROL     DH,1                    ; Position the next nibble 
 0773  D0 C6                            ROL     DH,1                    ; 
 0775  D0 C6                            ROL     DH,1                    ; 
 0777  D0 C6                            ROL     DH,1                    ; 
 0779  8A D6                            MOV     DL,DH                   ; Save nibble data 
 077B  80 E2 0F                         AND     DL,0Fh                  ; Isolate 4 bit nibble 
 077E  80 C2 30                         ADD     DL,'0'                  ; Convert nibble to ASCII 
                                 
 0781  80 FA 39                         CMP     DL,'9'                  ; Greater than 9? 
 0784  7E 03                            JLE     HEX_OUT                 ; No, continue 
 0786  80 C2 07                         ADD     DL,7                    ; Yes, convert to A-F 
                                 
 0789                           HEX_OUT:PRINT                           ; Display the result byte 
                                        ENDR    HEX_LOOP                ; Convert additional nibbles 
                                ;----------------------------------------------------------------------; 
                                ;       Terminate procedure                                            ; 
                                ;----------------------------------------------------------------------; 
                                        POPALL                          ; Restore all registers 
 079A  C3                               RET                             ; Return to caller 
                                HEX     ENDP                            ; Return to caller 
                                ;----------------------------------------------------------------------; 
                                ;       Terminate assembly                                             ; 
                                ;----------------------------------------------------------------------; 
 079B                           $SMW    ENDS 
                                        END     SMW 

Microsoft (R) Macro Assembler  Version 4.00                 10/29/86 12:02:06
SMW$CLOCK V01.02                                            Symbols-1
                                                             

Macros:

		N a m e			Lines

BCD_BIN  . . . . . . . . . . . .  	   8
BIN_BCD  . . . . . . . . . . . .  	  12
BIN_HEX  . . . . . . . . . . . .  	   4
CASE . . . . . . . . . . . . . .  	  11
CASEVEC  . . . . . . . . . . . .  	   1
ENDR . . . . . . . . . . . . . .  	   2
POPALL . . . . . . . . . . . . .  	   4
PRINT  . . . . . . . . . . . . .  	  17
PUSHALL  . . . . . . . . . . . .  	   5
REPEAT . . . . . . . . . . . . .  	   5
SHLM . . . . . . . . . . . . . .  	   3
SHRM . . . . . . . . . . . . . .  	   3
UPCASE . . . . . . . . . . . . .  	   7

Structures and Records:

                N a m e                 Width   # fields
                                        Shift   Width   Mask    Initial

TIME . . . . . . . . . . . . . .  	0008	0008
  CC . . . . . . . . . . . . . .  	0000
  SC . . . . . . . . . . . . . .  	0001
  MM . . . . . . . . . . . . . .  	0002
  HH . . . . . . . . . . . . . .  	0003
  DY . . . . . . . . . . . . . .  	0004
  DM . . . . . . . . . . . . . .  	0005
  MN . . . . . . . . . . . . . .  	0006
  YY . . . . . . . . . . . . . .  	0007

Segments and Groups:

                N a m e         	Size	Align	Combine Class

$SMW . . . . . . . . . . . . . .  	079B	PARA	PUBLIC	'$SMW'

Symbols:            

                N a m e         	Type	Value	Attr         

ADDRESS  . . . . . . . . . . . .  	L NEAR	01C7	$SMW

CAL  . . . . . . . . . . . . . .  	L NEAR	02FD	$SMW
CHECK  . . . . . . . . . . . . .  	L NEAR	01D3	$SMW
CMD  . . . . . . . . . . . . . .  	L NEAR	026B	$SMW
COMMAND  . . . . . . . . . . . .  	L NEAR	0266	$SMW

DAY  . . . . . . . . . . . . . .  	L BYTE 	0124	$SMW
DISPLAY  . . . . . . . . . . . .  	L NEAR	0503	$SMW

EXIT . . . . . . . . . . . . . .  	L NEAR	05BA	$SMW

FIND . . . . . . . . . . . . . .  	L NEAR	02A8	$SMW

HEX  . . . . . . . . . . . . . .  	N PROC	0762	$SMW	Length = 0039
HEX_LOOP . . . . . . . . . . . .  	L NEAR	0770	$SMW
HEX_OUT  . . . . . . . . . . . .  	L NEAR	0789	$SMW
Microsoft (R) Macro Assembler  Version 4.00                 10/29/86 12:02:06
SMW$CLOCK V01.02                                            Symbols-2
                                                             


MODE . . . . . . . . . . . . . .  	L NEAR	01CD	$SMW
MON  . . . . . . . . . . . . . .  	L BYTE 	0144	$SMW

NEXT . . . . . . . . . . . . . .  	L NEAR	0223	$SMW

RD_EXT . . . . . . . . . . . . .  	L NEAR	064E	$SMW
RD_ROM . . . . . . . . . . . . .  	L NEAR	0602	$SMW
RD_ROM0  . . . . . . . . . . . .  	L NEAR	061C	$SMW
RD_ROM0_BITS . . . . . . . . . .  	L NEAR	0623	$SMW
RD_ROM0_WORD . . . . . . . . . .  	L NEAR	061F	$SMW
RD_ROM1  . . . . . . . . . . . .  	L NEAR	0636	$SMW
RD_ROM1_BITS . . . . . . . . . .  	L NEAR	063D	$SMW
RD_ROM1_WORD . . . . . . . . . .  	L NEAR	0639	$SMW
RD_ROM_BITS  . . . . . . . . . .  	L NEAR	0609	$SMW
RD_ROM_WORD  . . . . . . . . . .  	L NEAR	0605	$SMW
READ . . . . . . . . . . . . . .  	N PROC	05C7	$SMW	Length = 0092
RESET  . . . . . . . . . . . . .  	N PROC	0715	$SMW	Length = 004D
RS_EXT . . . . . . . . . . . . .  	L NEAR	0757	$SMW
RS_ROM . . . . . . . . . . . . .  	L NEAR	0744	$SMW
RS_ROM0  . . . . . . . . . . . .  	L NEAR	074B	$SMW
RS_ROM1  . . . . . . . . . . . .  	L NEAR	0752	$SMW

SEARCH . . . . . . . . . . . . .  	L NEAR	01C4	$SMW
SET  . . . . . . . . . . . . . .  	L NEAR	03FB	$SMW
SMW  . . . . . . . . . . . . . .  	N PROC	0100	$SMW	Length = 04C7
SW$INIT  . . . . . . . . . . . .  	L WORD 	0114	$SMW
SW$MODE  . . . . . . . . . . . .  	L WORD 	0110	$SMW
SW$PARA  . . . . . . . . . . . .  	L WORD 	0112	$SMW
SW$TIME  . . . . . . . . . . . .  	L 0008	011C	$SMW

VECTOR . . . . . . . . . . . . .  	L NEAR	028E	$SMW
VERIFY . . . . . . . . . . . . .  	L NEAR	0206	$SMW

WRITE  . . . . . . . . . . . . .  	N PROC	0659	$SMW	Length = 0028
WRT  . . . . . . . . . . . . . .  	N PROC	0681	$SMW	Length = 0094
WT_EXT . . . . . . . . . . . . .  	L NEAR	070A	$SMW
WT_ROM . . . . . . . . . . . . .  	L NEAR	06AD	$SMW
WT_ROM0  . . . . . . . . . . . .  	L NEAR	06CA	$SMW
WT_ROM0_BITS . . . . . . . . . .  	L NEAR	06D6	$SMW
WT_ROM0_WORD . . . . . . . . . .  	L NEAR	06D0	$SMW
WT_ROM1  . . . . . . . . . . . .  	L NEAR	06EB	$SMW
WT_ROM1_BITS . . . . . . . . . .  	L NEAR	06F7	$SMW
WT_ROM1_WORD . . . . . . . . . .  	L NEAR	06F1	$SMW
WT_ROM_BITS  . . . . . . . . . .  	L NEAR	06B9	$SMW
WT_ROM_WORD  . . . . . . . . . .  	L NEAR	06B3	$SMW

??0000 . . . . . . . . . . . . .  	L NEAR	0239	$SMW
??0001 . . . . . . . . . . . . .  	L NEAR	0257	$SMW
??0002 . . . . . . . . . . . . .  	L NEAR	0278	$SMW
??0003 . . . . . . . . . . . . .  	L NEAR	02A5	$SMW
??0004 . . . . . . . . . . . . .  	L NEAR	029F	$SMW
??0005 . . . . . . . . . . . . .  	L NEAR	02AA	$SMW
??0006 . . . . . . . . . . . . .  	L NEAR	02CE	$SMW
??0007 . . . . . . . . . . . . .  	L NEAR	02E9	$SMW
??0008 . . . . . . . . . . . . .  	L NEAR	02EE	$SMW
??0029 . . . . . . . . . . . . .  	L NEAR	0602	$SMW
??002A . . . . . . . . . . . . .  	L NEAR	05FC	$SMW
??002B . . . . . . . . . . . . .  	L NEAR	06AD	$SMW
??002C . . . . . . . . . . . . .  	L NEAR	06A7	$SMW
Microsoft (R) Macro Assembler  Version 4.00                 10/29/86 12:02:06
SMW$CLOCK V01.02                                            Symbols-3
                                                             

??002D . . . . . . . . . . . . .  	L NEAR	0744	$SMW
??002E . . . . . . . . . . . . .  	L NEAR	073E	$SMW


   1183 Source  Lines
   2233 Total   Lines
    111 Symbols

  46720 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
